<?php
/**
 * RestaurantApiTest
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Gastronoslim
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0_inProgress
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tests\Functional;

/**
 * RestaurantApiTest Class Doc Comment
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestaurantApiTest extends BaseTestCase
{

    public function testrestaurantCreate200()
    {
        $response = $this->runApp('POST', '//restaurant',[$restaurant => '',]);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertContains('Success', (string)$response->getBody());
    }
    public function testrestaurantCreate400()
    {
        $response = $this->runApp('POST', '//restaurant',[$restaurant => '',]);

        $this->assertEquals(400, $response->getStatusCode());
        $this->assertContains('Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value', (string)$response->getBody());
    }
    public function testrestaurantCreate401()
    {
        $response = $this->runApp('POST', '//restaurant',[$restaurant => '',]);

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertContains('Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials', (string)$response->getBody());
    }
    public function testrestaurantCreate404()
    {
        $response = $this->runApp('POST', '//restaurant',[$restaurant => '',]);

        $this->assertEquals(404, $response->getStatusCode());
        $this->assertContains('Not Found  List of supported error codes: - 60: Resource not found', (string)$response->getBody());
    }
    public function testrestaurantCreate422()
    {
        $response = $this->runApp('POST', '//restaurant',[$restaurant => '',]);

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertContains('Unprocessable entity  Functional error', (string)$response->getBody());
    }

    /**
     * Test case for restaurantFind
     *
     * Recherche des restaurant par nom ou par ville.
     *
     */
        
    public function testrestaurantFind200()
    {
        $response = $this->runApp('GET', '//restaurant');

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertContains('Success', (string)$response->getBody());
    }
    public function testrestaurantFind400()
    {
        $response = $this->runApp('GET', '//restaurant');

        $this->assertEquals(400, $response->getStatusCode());
        $this->assertContains('Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value', (string)$response->getBody());
    }
    public function testrestaurantFind401()
    {
        $response = $this->runApp('GET', '//restaurant');

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertContains('Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials', (string)$response->getBody());
    }
    public function testrestaurantFind404()
    {
        $response = $this->runApp('GET', '//restaurant');

        $this->assertEquals(404, $response->getStatusCode());
        $this->assertContains('Not Found  List of supported error codes: - 60: Resource not found', (string)$response->getBody());
    }
    public function testrestaurantFind422()
    {
        $response = $this->runApp('GET', '//restaurant');

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertContains('Unprocessable entity  Functional error', (string)$response->getBody());
    }

    /**
     * Test case for restaurantGet
     *
     * Recherche d'un restaurant..
     *
     */
        
    public function testrestaurantGet200()
    {
        $response = $this->runApp('GET', '//restaurant/{id}');

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertContains('Success', (string)$response->getBody());
    }
    public function testrestaurantGet400()
    {
        $response = $this->runApp('GET', '//restaurant/{id}');

        $this->assertEquals(400, $response->getStatusCode());
        $this->assertContains('Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value', (string)$response->getBody());
    }
    public function testrestaurantGet401()
    {
        $response = $this->runApp('GET', '//restaurant/{id}');

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertContains('Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials', (string)$response->getBody());
    }
    public function testrestaurantGet404()
    {
        $response = $this->runApp('GET', '//restaurant/{id}');

        $this->assertEquals(404, $response->getStatusCode());
        $this->assertContains('Not Found  List of supported error codes: - 60: Resource not found', (string)$response->getBody());
    }
    public function testrestaurantGet422()
    {
        $response = $this->runApp('GET', '//restaurant/{id}');

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertContains('Unprocessable entity  Functional error', (string)$response->getBody());
    }

    /**
     * Test case for restaurantUpdate
     *
     * Modification des information d'un restaurant..
     *
     */
        
    public function testrestaurantUpdate200()
    {
        $response = $this->runApp('PUT', '//restaurant/{id}',[$restaurant => '',]);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertContains('Success', (string)$response->getBody());
    }
    public function testrestaurantUpdate400()
    {
        $response = $this->runApp('PUT', '//restaurant/{id}',[$restaurant => '',]);

        $this->assertEquals(400, $response->getStatusCode());
        $this->assertContains('Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value', (string)$response->getBody());
    }
    public function testrestaurantUpdate401()
    {
        $response = $this->runApp('PUT', '//restaurant/{id}',[$restaurant => '',]);

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertContains('Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials', (string)$response->getBody());
    }
    public function testrestaurantUpdate404()
    {
        $response = $this->runApp('PUT', '//restaurant/{id}',[$restaurant => '',]);

        $this->assertEquals(404, $response->getStatusCode());
        $this->assertContains('Not Found  List of supported error codes: - 60: Resource not found', (string)$response->getBody());
    }
    public function testrestaurantUpdate422()
    {
        $response = $this->runApp('PUT', '//restaurant/{id}',[$restaurant => '',]);

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertContains('Unprocessable entity  Functional error', (string)$response->getBody());
    }
}
