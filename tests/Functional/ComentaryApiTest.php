<?php
/**
 * ComentaryApiTest
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Gastronoslim
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0_inProgress
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tests\Functional;

/**
 * ComentaryApiTest Class Doc Comment
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComentaryApiTest extends BaseTestCase
{
    public function testCommentaryCreate()
    {
        $response = $this->runApp('POST', '/commentary/create/1', [
            'Commentaire' => 'TestCom',
            'Nom' => 'Borg'
        ]);
        $this->assertEquals(200, $response->getStatusCode());
    }

    public function testCommentaryCreateNoParams()
    {
        $response = $this->runApp('POST', '/commentary/create/1');

        $this->assertEquals(400, $response->getStatusCode());
    }

    public function testCommentaryCreateWrongParam()
    {
        $response = $this->runApp('POST', '/commentary/create/1', [
            'Commetaire' => 'TestCom',
            'Nom' => 'Borg'
        ]);

        $this->assertEquals(400, $response->getStatusCode());
    }

    public function testCommentaryCreatenoRestaurant()
    {
        $response = $this->runApp('POST', '/commentary/create/', [
            'Commentaire' => 'TestCom',
            'Nom' => 'Borg'
        ]);
        $this->assertEquals(400, $response->getStatusCode());
    }

    /**
     * Test case for comentaryFind
     *
     * find comentary.
     *
     */

    public function testgetComment()
    {
        $response = $this->runApp('get', '/commentary/1');
        $this->assertEquals(200, $response->getStatusCode());

    }

    public function testgetCommentBadArgs()
    {
        $response = $this->runApp('get', '/commentary/987987956414894');
        $this->assertEquals(404, $response->getStatusCode());

    }

    public function testgetCommentNoArgs()
    {
        $response = $this->runApp('get', '/commentary/');
        $this->assertEquals(400, $response->getStatusCode());

    }


}
