<?php
/**
 * ComentaryApiTest
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Gastronoslim
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0_inProgress
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tests\Functional;

/**
 * ComentaryApiTest Class Doc Comment
 *
 * @category Class
 * @package  SwaggerServer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComentaryApiTest extends BaseTestCase
{

    public function testCommentaryCreate()
    {
        $response = $this->runApp('POST', '/authent/login', [
            'email' => 'jano@lapin.net',
            'password' => 'jano'
        ]);
        $this->assertContains('token', (string)$response->getBody());
        $this->assertEquals(200, $response->getStatusCode());

    }

    public function testauthentLoginNoParams()
    {
        $response = $this->runApp('POST', '/authent/login');

        $this->assertEquals(400, $response->getStatusCode());
    }

    public function testauthentLoginWrongPwd()
    {
        $response = $this->runApp('POST', '/authent/login', [
            'email' => 'jano@lapin.net',
            'password' => 'guest'
        ]);

        $this->assertEquals(401, $response->getStatusCode());
    }

    public function testauthentLoginWrongParam()
    {
        $response = $this->runApp('POST', '/authent/login', [
            'emil' => 'jano@lapin.net',
            'password' => 'guest'
        ]);

        $this->assertEquals(400, $response->getStatusCode());
    }

    public function testauthentLoginUnknownUser()
    {
        $response = $this->runApp('POST', '/authent/login', [
            'email' => 'hacker@root-me.org',
            'password' => 'guesswhat'
        ]);

        $this->assertEquals(401, $response->getStatusCode());
    }

    /**
     * Test case for comentaryDelete
     *
     * delete a comentary.
     *
     */
        

    /**
     * Test case for comentaryFind
     *
     * find comentary.
     *
     */
        
    public function testcomentaryFind200()
    {
        $response = $this->runApp('GET', '//comentary');

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertContains('Success', (string)$response->getBody());
    }
    public function testcomentaryFind400()
    {
        $response = $this->runApp('GET', '//comentary');

        $this->assertEquals(400, $response->getStatusCode());
        $this->assertContains('Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value', (string)$response->getBody());
    }
    public function testcomentaryFind401()
    {
        $response = $this->runApp('GET', '//comentary');

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertContains('Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials', (string)$response->getBody());
    }
    public function testcomentaryFind404()
    {
        $response = $this->runApp('GET', '//comentary');

        $this->assertEquals(404, $response->getStatusCode());
        $this->assertContains('Not Found  List of supported error codes: - 60: Resource not found', (string)$response->getBody());
    }
    public function testcomentaryFind422()
    {
        $response = $this->runApp('GET', '//comentary');

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertContains('Unprocessable entity  Functional error', (string)$response->getBody());
    }


}
